name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create Release Archives
        run: |
          # Display the tag name from GitHub context
          echo "Creating release for tag: ${{ github.ref_name }}"
          
          # Create a temporary directory for the release files
          mkdir -p release_files
          if [ ! -d "release_files" ]; then
            echo "::error::Failed to create release_files directory"
            exit 1
          fi
          
          # Copy all necessary files excluding run scripts and their documentation
          echo "Copying files to release directory (excluding run scripts and documentation)..."
          rsync -av \
                    --exclude=".git/" \
                    --exclude=".github/" \
                    --exclude=".vscode/" \
                    --exclude=".pytest_cache/" \
                    --exclude=".ruff_cache/" \
                    --exclude=".venv/" \
                    --exclude="__pycache__/" \
                    --exclude="*.pyc" \
                    --exclude="run-*.sh" \
                    --exclude="Run-*.ps1" \
                    --exclude="RUN_SCRIPTS.md" \
                    --exclude="CONTRIBUTIONS.md" \
                    --exclude="chatserver-*.tar.gz" \
                    --exclude="chatserver-*.zip" \
                    . release_files/
          
          # Check if rsync was successful
          if [ $? -ne 0 ]; then
            echo "::error::rsync command failed"
            exit 1
          fi
          
          # Debug: List files in release_files
          echo "Files to be included in archive:"
          find release_files -type f | sort
          
          # Check if any files were copied
          if [ -z "$(find release_files -type f)" ]; then
            echo "::error::No files were copied to release_files directory"
            exit 1
          fi
          
          # Create tar.gz archive
          echo "Creating tar.gz archive..."
          cd release_files
          ARCHIVE_NAME="../chatserver-${{ github.ref_name }}.tar.gz"
          tar -czf "$ARCHIVE_NAME" .
          if [ $? -ne 0 ]; then
            echo "::error::Failed to create tar.gz archive"
            exit 1
          fi
          
          # Create zip archive
          echo "Creating zip archive..."
          ZIP_NAME="../chatserver-${{ github.ref_name }}.zip"
          zip -r "$ZIP_NAME" .
          if [ $? -ne 0 ]; then
            echo "::error::Failed to create zip archive"
            exit 1
          fi
          cd ..
          
          # Verify tar.gz archive was created and has content
          if [ ! -f "chatserver-${{ github.ref_name }}.tar.gz" ]; then
            echo "::error::tar.gz archive file was not created"
            exit 1
          fi
          
          TARGZ_SIZE=$(stat -c%s "chatserver-${{ github.ref_name }}.tar.gz" 2>/dev/null || stat -f%z "chatserver-${{ github.ref_name }}.tar.gz")
          if [ "$TARGZ_SIZE" -lt 1000 ]; then
            echo "::warning::tar.gz archive file is suspiciously small: $TARGZ_SIZE bytes"
          fi
          
          # Verify zip archive was created and has content
          if [ ! -f "chatserver-${{ github.ref_name }}.zip" ]; then
            echo "::error::zip archive file was not created"
            exit 1
          fi
          
          ZIP_SIZE=$(stat -c%s "chatserver-${{ github.ref_name }}.zip" 2>/dev/null || stat -f%z "chatserver-${{ github.ref_name }}.zip")
          if [ "$ZIP_SIZE" -lt 1000 ]; then
            echo "::warning::zip archive file is suspiciously small: $ZIP_SIZE bytes"
          fi
          
          echo "Archives created:"
          echo "- chatserver-${{ github.ref_name }}.tar.gz ($TARGZ_SIZE bytes)"
          echo "- chatserver-${{ github.ref_name }}.zip ($ZIP_SIZE bytes)"

      # Set file permissions and verify run scripts for individual release
      - name: Prepare Run Scripts for Release
        run: |
          echo "Preparing run scripts for release..."
          
          # Check if the script files exist
          echo "Checking for run script files..."
          
          # List of required script files
          required_files=(
            "run-archive.sh"
            "run-docker.sh"
            "run-tests-archive.sh"
            "Run-Archive.ps1"
            "Run-Docker.ps1"
            "Run-Tests-Archive.ps1"
            "RUN_SCRIPTS.md"
          )
          
          # Check each required file
          missing_files=0
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "::error::Required file not found: $file"
              missing_files=$((missing_files+1))
            else
              echo "Found required file: $file"
            fi
          done
          
          if [ $missing_files -gt 0 ]; then
            echo "::error::Missing $missing_files required files"
            exit 1
          fi
          
          # Set executable permissions on shell scripts
          echo "Setting executable permissions on shell scripts"
          chmod +x run-*.sh
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to set executable permissions"
          fi
          
          # Verify all script files exist and show their permissions
          echo "Verifying script files permissions:"
          ls -la run-*.sh Run-*.ps1 RUN_SCRIPTS.md
          
          # Verify script content (first few lines)
          echo "Verifying script content (first few lines):"
          for script in run-*.sh Run-*.ps1; do
            echo "=== First 5 lines of $script ==="
            if [ ! -s "$script" ]; then
              echo "::error::Script file is empty: $script"
              exit 1
            fi
            head -n 5 "$script"
            echo ""
          done
          
          # Check file sizes to ensure they're not empty
          echo "File sizes:"
          du -h run-*.sh Run-*.ps1 RUN_SCRIPTS.md
          
          # Additional verification for RUN_SCRIPTS.md
          if [ ! -s "RUN_SCRIPTS.md" ]; then
            echo "::error::RUN_SCRIPTS.md is empty"
            exit 1
          fi
          
          echo "All run script files have been verified and prepared for release"
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            chatserver-${{ github.ref_name }}.tar.gz
            chatserver-${{ github.ref_name }}.zip
            run-archive.sh
            run-docker.sh
            run-tests-archive.sh
            Run-Archive.ps1
            Run-Docker.ps1
            Run-Tests-Archive.ps1
            RUN_SCRIPTS.md
          name: ChatServer ${{ github.ref_name }}
          body: |
            # ChatServer ${{ github.ref_name }}
            
            This release includes:
            - The main ChatServer application archives:
              - Linux/macOS: `chatserver-${{ github.ref_name }}.tar.gz`
              - Windows: `chatserver-${{ github.ref_name }}.zip`
            - Individual run scripts for Linux/macOS (`.sh` files)
            - Individual run scripts for Windows (`.ps1` files)
            - Documentation for all run scripts (`RUN_SCRIPTS.md`)
            
            ## Run Scripts
            
            Run scripts allow you to easily extract, run, and test the ChatServer:
            
            - `run-archive.sh` / `Run-Archive.ps1`: Extract and run the server
            - `run-tests-archive.sh` / `Run-Tests-Archive.ps1`: Run tests on the archive
            - `run-docker.sh` / `Run-Docker.ps1`: Run the server in Docker
            
            See `RUN_SCRIPTS.md` for detailed usage instructions.
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Verify Release
        if: success()
        run: |
          echo "Release created successfully!"
          echo "Release assets should include:"
          echo "- chatserver-${{ github.ref_name }}.tar.gz (Linux/macOS archive)"
          echo "- chatserver-${{ github.ref_name }}.zip (Windows archive)"
          echo "- All run scripts as individual files"
          echo "- RUN_SCRIPTS.md as an individual file"
